import { Component, DoCheck, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { Employee } from '../app.component';

@Component({
  selector: 'app-dynamic-form-question',
  templateUrl: './dynamic-form-question.component.html',
  styleUrls: ['./dynamic-form-question.component.css']
})
export class DynamicFormQuestionComponent implements OnInit, DoCheck {

  @Input() questions: Employee[];

  form: FormGroup;

  obj = {};

  @Output()
  formSubmitted: EventEmitter<{}> = new EventEmitter();

  isFormSubmitted = false;

  selectDefaultValue: Employee;

  constructor(private formBuilder: FormBuilder) { }

  ngOnInit(): void {
    this.questions.forEach(employee => {
      this.obj[employee.key] = new FormControl('', Validators.required);
      if (employee.key === 'state') {
        //this.selectDefaultValue = employee;
      }
    });
    this.form = this.formBuilder.group(this.obj);
  }

  ngDoCheck() {
    this.form.controls.firstName.valueChanges
      .subscribe(f => {
        this.onCountryChanged(f);
      });

    this.form.controls.state.valueChanges
      .subscribe(f => {
        this.onCountryChanged(f);
      });
  }

  onCountryChanged(value) {
    console.log('onCountryChanged : ', value);
  }

  validations(employeeObj) {
    const arr = [];
    employeeObj.validations.forEach(element => {
      if (element === 'required') {
        arr.push(Validators.required);
      }
      if (element === 'minLength') {
        arr.push(Validators.min(10));
      }

    });
    return Validators.compose([...arr]);
  }

  onSubmit() {
    this.isFormSubmitted = true;
    this.formSubmitted.emit(this.form);
  }
  resetForm() {
    this.form.controls.firstName.setValue('');
    this.form.controls.emailAddress.setValue('');
    this.form.controls.state.setValue('');
  }

}
